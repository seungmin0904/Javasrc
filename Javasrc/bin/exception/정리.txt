exception (예외)
발생시점
1) 컴파일 에러 : 컴파일 시 
2) 런타임 에러 : 실행 시
    (1) error : 메모리 부족 , 스택오버플로우
    (2) exception : 수습 가능

object

RuntimeException 아래 나오는 에러는 런타임 에러 

Exception 처리
try ~ catch catch는 여러개 사용 가능

try{
    예외가 발생 할 가능성이 있는 문장을 삽입
}catch(Exception ex){
    Exception 이 발생하면 처리하기 위한 문장 삽입
}

catch문 작성시 멀티 블럭 가능
catch (ArrayIndexOutOfBoundsException | ArithmeticException e)

2) try ~ catch ~ finally
finally : 단독 사용 불가 , 예외 발생 여부 상관없이 반드시 실행되어야 할 코드
          ex) 리소스(입출력스트림, 소켓 등의 자원)의 close() 호출 -  sc.close()

3) 강제 예외 발생 - Exception 사용
 throw new Exception(" ")


4) 예외 전달(직접처리X)
throws Exception



try - with - resources :자동 리소스 닫기
+ finally 에서 주로 자원닫기 구문 실행 => 자바 1.7부터 자동 닫기 지원
finally로 개발자가 자원닫기를 직접 명시하지 않아도 됨
try(자동으로 닫아야 하는 객체 생성 =new ){

}catch(Exception){


}



